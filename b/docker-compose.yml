# https://docs.docker.com/compose/compose-file/compose-file-v3/#extension-fields
x-build: &dockerfile-dev-build
  context: .
  dockerfile: Dockerfile.dev

services:
  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - 15672:15672
    volumes:
      - ./tests/resources/custom-rabbitmq-conf:/etc/rabbitmq/
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 5

  remote-interpreter:
    build: *dockerfile-dev-build
    env_file: .env
    volumes:
      - .:/app
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      otel-collector:
        condition: service_started
    command:
      [
        "./scripts/start-development.sh",
      ]
    healthcheck:
      test: [ "CMD-SHELL", "python manage.py health_check -s readiness --skip-checks" ]
      interval: 10s
      timeout: 5s
      retries: 5

  app-pubsub:
    build: *dockerfile-dev-build
    env_file: .env
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command:
      [
        "./scripts/consumers/start-create-audit-action-consumer.sh",
      ]
    healthcheck:
      test: [ "CMD-SHELL", "python manage.py health_check -s readiness --skip-checks" ]
      interval: 10s
      timeout: 5s
      retries: 5

  app-production:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    environment:
      DJANGO_DEBUG: "False"
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      otel-collector:
        condition: service_started
    command:
      [
        "./scripts/start-production.sh",
      ]
    healthcheck:
      test: [ "CMD-SHELL", "python manage.py health_check -s readiness --skip-checks" ]
      interval: 10s
      timeout: 5s
      retries: 5

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.113.0
    command: [ "--config=/etc/otel-collector-config.yml" ]
    volumes:
      - ./otel-collector-config.yml:/etc/otel-collector-config.yml
    depends_on:
      hyperdx:
        condition: service_healthy
      jaeger-all-in-one:
        condition: service_started
      zipkin-all-in-one:
        condition: service_started
      prometheus:
        condition: service_started

  hyperdx:
    image: hyperdx/hyperdx-local:1.10.0
    environment:
      HYPERDX_APP_PORT: 8090 # HyperDX UI (Next.js)
      HYPERDX_API_PORT: 8091 # Private HyperDX API for the UI
    ports:
      - "8090:8080"
      - "8091:8000"
      - "4317:4317"
    healthcheck:
      test: curl --fail http://localhost:8000/health || exit 1
      interval: 10s
      timeout: 3s

  jaeger-all-in-one:
    image: jaegertracing/all-in-one:1.63.0
    restart: always
    ports:
      - "16686:16686"
      - "14268"
      - "14250"

  zipkin-all-in-one:
    image: openzipkin/zipkin:3.4.2
    environment:
      - JAVA_OPTS=-Xms1024m -Xmx1024m -XX:+ExitOnOutOfMemoryError
    restart: always
    ports:
      - "9411:9411"

  prometheus:
    image: prom/prometheus:v3.0.0
    restart: always
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  integration-tests:
    build: *dockerfile-dev-build
    env_file: .env
    volumes:
      - .:/app
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command:
      [
        "./scripts/start-tests.sh",
      ]

  sonar:
    container_name: sonar
    image: sonarqube:9-community
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    ports:
      - "9000:9000"

  sonar-cli:
    container_name: sonar-cli
    image: sonarsource/sonar-scanner-cli
    working_dir: /api
    environment:
      - SONAR_LOGIN=admin
      - SONAR_PASSWORD=test
    volumes:
      - .:/api
    command: ["sonar-scanner", "--debug"]

  lint-formatter:
    build: *dockerfile-dev-build
    volumes:
      - .:/app
    command: ["./scripts/start-formatter-lint.sh"]
