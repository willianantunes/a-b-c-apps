[tool.poetry]
package-mode = false

[tool.poetry.dependencies]
python = "^3.12"
django = "*"
djangorestframework = "*"
psycopg = { extras = ["binary"], version = "*" }
django-health-check = "*"
gunicorn = "*"
gevent = "*"
requests = "*"
django-stomp = "*"
request-id-django-log = "*"
python-json-logger = "*"
django-cors-headers = "*"
opentelemetry-sdk = "*"
# https://github.com/open-telemetry/opentelemetry-python-contrib/tree/803bb322ba77bc2afb30fb9c31fb8cdde04fc8d6/instrumentation
opentelemetry-exporter-otlp = "*"
opentelemetry-instrumentation-django = "*"
opentelemetry-instrumentation-psycopg = "*"
opentelemetry-instrumentation-wsgi = "*"
opentelemetry-instrumentation-logging = "*"
opentelemetry-instrumentation-django-stomp = "*"
opentelemetry-instrumentation-urllib3 = "*"
opentelemetry-instrumentation-urllib = "*"
opentelemetry-instrumentation-requests = "*"
opentelemetry-instrumentation-system-metrics = "*"

[tool.poetry.group.dev.dependencies]
coverage = "*"
pre-commit = "*"
requests-mock = "*"
django-debug-toolbar = "*"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "letter_b.settings"

[tool.black]
line-length = 120
target_version = ["py312"]
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.isort]
force_single_line = true
line_length = 120
py_version = 312
use_parentheses = true
multi_line_output = 3
include_trailing_comma = true
lines_between_types = 1

[tool.mypy]
python_version = "3.12"

# flake8-mypy expects the two following for sensible formatting
show_column_numbers = true
show_error_context = false

# do not follow imports (except for ones found in typeshed)
follow_imports = "skip"

# suppress errors about unsatisfied imports
ignore_missing_imports = true

# allow untyped calls as a consequence of the options above
disallow_untyped_calls = false

# allow returning Any as a consequence of the options above
warn_return_any = false

# treat Optional per PEP 484
strict_optional = true

# ensure all execution paths are returning
warn_no_return = true

# lint-style cleanliness for typing needs to be disabled; returns more errors
# than the full run.
warn_redundant_casts = false
warn_unused_ignores = false

# The following are off by default since they're too noisy.
# Flip them on if you feel adventurous.
disallow_untyped_defs = false
check_untyped_defs = false

[[tool.mypy.overrides]]
module = "*.migrations.*"
ignore_errors = true
